import unittest
from day3 import prep_input

class TestPrepInput(unittest.TestCase):

    def test_mock_input(self):
        """
        I totally did not understand what they wanted here until I looked at the sample input
        and saw my code fail. 
        """
        mock = ["a", "b", "c", "d", "e", "f", "g"]
        wider = prep_input(mock)
        print(wider)
        assert wider == ["aa", "bb", "cc", "dd", "ee", "ff", "gg"]

class TestExample(unittest.TestCase):

    def test_example(self):
        example =   "..##.........##.........##.........##.........##.........##.......\n" \
                    "#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\n" \
                    ".#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\n" \
                    "..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\n" \
                    ".#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\n" \
                    "..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....\n" \
                    ".#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\n" \
                    ".#........#.#........#.#........#.#........#.#........#.#........#\n" \
                    "#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...\n" \
                    "#...##....##...##....##...##....##...##....##...##....##...##....#\n" \
                    ".#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#"

        lines = example.split('\n')
        trees = 0
        right = 0
        for i,x in enumerate(lines):
            i += 1 #down 1
            right += 3 #over 3
            try:
                if lines[i][right] == '#':
                    trees += 1
            except IndexError as e:
                pass

        assert trees == 7

class TestExact(unittest.TestCase):

    def test_example_matches(self):
        """
        Could be getting the right answer for the wrong reasons.
        Make the output match the example they show.
        :return: updated example with X where there was a tree, and O where there wasn't. 
        """
        example =   "..##.........##.........##.........##.........##.........##.......\n" \
                    "#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\n" \
                    ".#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\n" \
                    "..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\n" \
                    ".#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\n" \
                    "..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....\n" \
                    ".#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\n" \
                    ".#........#.#........#.#........#.#........#.#........#.#........#\n" \
                    "#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...\n" \
                    "#...##....##...##....##...##....##...##....##...##....##...##....#\n" \
                    ".#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#"
        expected_result = "..##.........##.........##.........##.........##.........##.......\n" \
                            "#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..\n" \
                            ".#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.\n" \
                            "..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#\n" \
                            ".#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.\n" \
                            "..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....\n" \
                            ".#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#\n" \
                            ".#........#.#........X.#........#.#........#.#........#.#........#\n" \
                            "#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...\n" \
                            "#...##....##...##....##...#X....##...##....##...##....##...##....#\n" \
                            ".#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#"
        lines = example.split('\n')
        expected_lines = expected_result.split('\n')
        trees = 0
        right = 0
        for i, x in enumerate(lines):
            i += 1  # down 1
            right += 3  # over 3
            try:
                if lines[i][right] == '#':
                    trees += 1
                    lines = lines[0:i] + [lines[i][0:right] + 'X' + lines[i][right+1:]] + lines[i+1:]
                else:
                    lines= lines[0:i] + [lines[i][0:right] + 'O' + lines[i][right + 1:]] + lines[i+1:]
            except IndexError as e:
                pass
        assert lines == expected_lines

if __name__ == '__main__':
    unittest.main()